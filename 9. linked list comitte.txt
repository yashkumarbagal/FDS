#include <stdlib.h>
#include <iostream>
using namespace std;

typedef struct node {
    int prn;
    char name[10]; // actual data
    struct node *next;
} node;

class student {
public:
    node *create();
    void print(node *HEAD);
    node *insertsec(node *head);
    node *insertmem(node *head);
    node *insertpres(node *head);
    node *reverse(node *head);
    node *del(node *head);
    node *conca(node *head1, node *head2);
    void count(node *head);
};

node *student::create() {
    node *head, *p;
    int i, n;
    head = NULL;
    cout << "\n Enter the no of nodes:" << endl;
    cin >> n;
    if (n <= 0) {
        return head;
    }
    head = new node; // allocate memory for the first node
    head->next = NULL;
    cout << "\n Enter the student PRN no and name:" << endl;
    cin >> head->prn >> head->name; // read the data in the first node
    p = head;

    for (i = 1; i < n; i++) {
        cout << "\nStudent " << i + 1 << " PRN no. and name:";
        p->next = new node;
        p = p->next;
        p->next = NULL;
        cin >> p->prn >> p->name;
    }
    return head;
}

void student::print(node *HEAD) {
    node *p;
    cout << "List of students:";
    for (p = HEAD; p != NULL; p = p->next) {
        cout << "\n" << p->prn << "\t" << p->name;
    }
}

node *student::insertsec(node *head) {
    node *p, *q;
    p = new node;
    cout << "\n Enter the PRN no of the student secretary:";
    cin >> p->prn;
    cout << "\n Enter the name of the student:";
    cin >> p->name;
    if (head == NULL) {
        head = p;
        p->next = NULL;
        return head;
    } else {
        q = head;
        while (q->next != NULL)
            q = q->next;
        q->next = p;
        p->next = NULL;
        return head;
    }
    cout << "\n_______Secretary is inserted_______" << endl;
}

node *student::insertmem(node *head) {
    node *p, *q;
    int key;
    p = new node;
    cout << "\n Enter the PRN no of the student member:";
    cin >> p->prn;
    cout << "\n Enter the name of the student:";
    cin >> p->name;
    if (head == NULL) {
        head = p;
        p->next = NULL;
    } else {
        cout << "\n Enter the PRN no of the member after which to insert:";
        cin >> key;
        q = head;
        while (q != NULL) {
            if (q->prn == key) {
                p->next = q->next;
                q->next = p;
                break;
            }
            q = q->next;
        }
    }
    return head;
}

node *student::insertpres(node *head) {
    node *p;
    p = new node;
    cout << "\n Enter the PRN no of the student president:";
    cin >> p->prn;
    cout << "\n Enter the name of the student:";
    cin >> p->name;
    if (head == NULL) {
        head = p;
        p->next = NULL;
    } else {
        p->next = head;
        head = p;
    }
    cout << "\n______President is inserted______";
    return head;
}

node *student::reverse(node *head) {
    if (head != NULL) {
        reverse(head->next);
        cout << "\n" << head->prn << "\t" << head->name;
    }
    return head;
}

node *student::del(node *head) {
    node *p, *q;
    int key;
    if (head == NULL) {
        cout << "\n The list is empty.";
        return head;
    }
    cout << "\n Enter the PRN of the node to delete:";
    cin >> key;
    p = head;
    q = NULL;
    while (p != NULL) {
        if (p->prn == key)
            break;
        q = p;
        p = p->next;
    }
    if (p == NULL) {
        cout << "\n Node not found.";
    } else {
        if (p == head)
            head = p->next;
        else
            q->next = p->next;
        delete (p);
        cout << "\n The member is deleted.";
    }
    return head;
}

node *student::conca(node *head1, node *head2) {
    node *p;
    if (head1 == NULL)
        return head2;
    if (head2 == NULL)
        return head1;
    p = head1;
    while (p->next != NULL)
        p = p->next;
    p->next = head2;
    return head1;
}

void student::count(node *head) {
    node *d;
    int total = 0;
    d = head;
    if (d == NULL) {
        cout << "\n The list is empty.";
        return;
    }
    while (d != NULL) {
        total++;
        d = d->next;
    }
    cout << "\n Total no of members in the club are:" << total;
}

int main() {
    int m, ch;
    node *st = NULL;
    node *s1, *s2;
    node *head = NULL, *head4 = NULL, *head5 = NULL;
    student s;
    do {
        cout << "\n Main menu";
        cout << "\n 1. Create club:";
        cout << "\n 2. Display members of club:";
        cout << "\n 3. Insert:";
        cout << "\n 4. Delete member:";
        cout << "\n 5. Total no of members of club:";
        cout << "\n 6. Display members in reverse order:";
        cout << "\n 7. Concatenate two lists:";
        cout << "\n 8. Quit.";
        cout << "\n Enter your choice:";
        cin >> m;

        switch (m) {
        case 1:
            head = s.create();
            break;
        case 2:
            s.print(head);
            break;
        case 3:
            cout << "\n Members of club are:\n";
            s.print(head);

            cout << "\n Insertion main menu:";
            cout << "\n 1. Insert president:";
            cout << "\n 2. Insert member:";
            cout << "\n 3. Insert secretary:";
            cout << "\n Enter your choice:";
            cin >> ch;
            switch (ch) {
            case 1:
                head4 = s.insertpres(head);
                s.print(head4);
                break;
            case 2:
                head4 = s.insertmem(head);
                s.print(head4);
                break;
            case 3:
                head4 = s.insertsec(head);
                s.print(head4);
                break;
            default:
                cout << "\n Invalid choice.";
            }
            break;
        case 4:
            head5 = s.del(head4);
            s.print(head5);
            break;
        case 5:
            s.count(head5);
            break;
        case 6:
            s.reverse(head5);
            break;
        case 7:
            cout << "\n Enter the members in the first division:";
            s1 = s.create();
            s.print(s1);
            cout << "\n Enter the members in the second division:";
            s2 = s.create();
            s.print(s2);
            cout << "\n Concatenated division is:";
            st = s.conca(s1, s2);
            s.print(st);
            break;
        case 8:
            exit(0);
        default:
            cout << "\n Invalid choice.";
        }
    } while (m != 8);
    return 0;
}
